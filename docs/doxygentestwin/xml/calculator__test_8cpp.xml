<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="calculator__test_8cpp" kind="file" language="C++">
    <compoundname>calculator_test.cpp</compoundname>
    <includes local="yes">gtest/gtest.h</includes>
    <includes local="yes">../../calculator/header/calculator.h</includes>
    <incdepgraph>
      <node id="3">
        <label>../../calculator/header/calculator.h</label>
      </node>
      <node id="1">
        <label>src/tests/calculator/calculator_test.cpp</label>
        <link refid="calculator__test_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>gtest/gtest.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_calculator_test" prot="public">CalculatorTest</innerclass>
    <innernamespace refid="namespace_coruh_1_1_calculator">Coruh::Calculator</innernamespace>
    <sectiondef kind="func">
      <memberdef kind="function" id="calculator__test_8cpp_1a7d9bab343a282353423ab2d980c8ac52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(CalculatorTest, TestAdd)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_calculator_test" kindref="compound">CalculatorTest</ref></type>
        </param>
        <param>
          <type>TestAdd</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/calculator/calculator_test.cpp" line="13" column="1" bodyfile="src/tests/calculator/calculator_test.cpp" bodystart="13" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="calculator__test_8cpp_1a5b10cd9bfcd77263a48173a3d0b5ff7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(CalculatorTest, TestSubtract)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_calculator_test" kindref="compound">CalculatorTest</ref></type>
        </param>
        <param>
          <type>TestSubtract</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/calculator/calculator_test.cpp" line="19" column="1" bodyfile="src/tests/calculator/calculator_test.cpp" bodystart="19" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="calculator__test_8cpp_1acd37c4ea71846a04d2b04b3c6c3e135b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(CalculatorTest, TestMultiply)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_calculator_test" kindref="compound">CalculatorTest</ref></type>
        </param>
        <param>
          <type>TestMultiply</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/calculator/calculator_test.cpp" line="25" column="1" bodyfile="src/tests/calculator/calculator_test.cpp" bodystart="25" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="calculator__test_8cpp_1a885dc4f6a00c3d0b54725164c875dd25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(CalculatorTest, TestDivide)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_calculator_test" kindref="compound">CalculatorTest</ref></type>
        </param>
        <param>
          <type>TestDivide</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/calculator/calculator_test.cpp" line="31" column="1" bodyfile="src/tests/calculator/calculator_test.cpp" bodystart="31" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="calculator__test_8cpp_1ad969fe067beaf84e4cf43d32011ab74a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(CalculatorTest, TestIsInsideCircle)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_calculator_test" kindref="compound">CalculatorTest</ref></type>
        </param>
        <param>
          <type>TestIsInsideCircle</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/calculator/calculator_test.cpp" line="39" column="1" bodyfile="src/tests/calculator/calculator_test.cpp" bodystart="39" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="calculator__test_8cpp_1a677a867bb10f7d7cb26b929c0a3984ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(CalculatorTest, TestGeneratePointsSizeAndRange)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_calculator_test" kindref="compound">CalculatorTest</ref></type>
        </param>
        <param>
          <type>TestGeneratePointsSizeAndRange</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/calculator/calculator_test.cpp" line="49" column="1" bodyfile="src/tests/calculator/calculator_test.cpp" bodystart="49" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="calculator__test_8cpp_1ad05614cd3fed8eb94c3038df96b4ed4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(CalculatorTest, TestCalculatePiSequential)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_calculator_test" kindref="compound">CalculatorTest</ref></type>
        </param>
        <param>
          <type>TestCalculatePiSequential</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/calculator/calculator_test.cpp" line="62" column="1" bodyfile="src/tests/calculator/calculator_test.cpp" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="calculator__test_8cpp_1a7db73f77b8132899803b783d24fc80d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(CalculatorTest, TestCalculatePiParallel)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_calculator_test" kindref="compound">CalculatorTest</ref></type>
        </param>
        <param>
          <type>TestCalculatePiParallel</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/calculator/calculator_test.cpp" line="68" column="1" bodyfile="src/tests/calculator/calculator_test.cpp" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="calculator__test_8cpp_1ada64ada539a2ca0dd5663e7ad1cdc275" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(CalculatorTest, TestCalculateConvergence)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_calculator_test" kindref="compound">CalculatorTest</ref></type>
        </param>
        <param>
          <type>TestCalculateConvergence</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/calculator/calculator_test.cpp" line="74" column="1" bodyfile="src/tests/calculator/calculator_test.cpp" bodystart="74" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="calculator__test_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/calculator/calculator_test.cpp" line="86" column="5" bodyfile="src/tests/calculator/calculator_test.cpp" bodystart="86" bodyend="89"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../../calculator/header/calculator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Coruh::Calculator;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="class_calculator_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_calculator_test" kindref="compound">CalculatorTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>::testing::Test<sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8" refid="class_calculator_test_1a16acabe39b00dc041fea47f1b99f9983" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_calculator_test_1a16acabe39b00dc041fea47f1b99f9983" kindref="member">SetUp</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="9" refid="class_calculator_test_1a49df00b9c0d435932adb5e1291ca06c4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_calculator_test_1a49df00b9c0d435932adb5e1291ca06c4" kindref="member">TearDown</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="10"><highlight class="normal">};</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>===<sp/>Test:<sp/>Basic<sp/>Arithmetic<sp/>Operations<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="calculator__test_8cpp_1a7d9bab343a282353423ab2d980c8ac52" refkind="member"><highlight class="normal"><ref refid="calculator__test_8cpp_1a7d9bab343a282353423ab2d980c8ac52" kindref="member">TEST_F</ref>(<ref refid="class_calculator_test" kindref="compound">CalculatorTest</ref>,<sp/>TestAdd)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_DOUBLE_EQ(Calculator::add(2.0,<sp/>3.0),<sp/>5.0);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_DOUBLE_EQ(Calculator::add(-2.0,<sp/>3.0),<sp/>1.0);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_DOUBLE_EQ(Calculator::add(0.0,<sp/>0.0),<sp/>0.0);</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="calculator__test_8cpp_1a5b10cd9bfcd77263a48173a3d0b5ff7b" refkind="member"><highlight class="normal"><ref refid="calculator__test_8cpp_1a7d9bab343a282353423ab2d980c8ac52" kindref="member">TEST_F</ref>(<ref refid="class_calculator_test" kindref="compound">CalculatorTest</ref>,<sp/>TestSubtract)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_DOUBLE_EQ(Calculator::subtract(5.0,<sp/>3.0),<sp/>2.0);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_DOUBLE_EQ(Calculator::subtract(-2.0,<sp/>3.0),<sp/>-5.0);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_DOUBLE_EQ(Calculator::subtract(0.0,<sp/>0.0),<sp/>0.0);</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="calculator__test_8cpp_1acd37c4ea71846a04d2b04b3c6c3e135b" refkind="member"><highlight class="normal"><ref refid="calculator__test_8cpp_1a7d9bab343a282353423ab2d980c8ac52" kindref="member">TEST_F</ref>(<ref refid="class_calculator_test" kindref="compound">CalculatorTest</ref>,<sp/>TestMultiply)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_DOUBLE_EQ(Calculator::multiply(2.0,<sp/>3.0),<sp/>6.0);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_DOUBLE_EQ(Calculator::multiply(-2.0,<sp/>3.0),<sp/>-6.0);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_DOUBLE_EQ(Calculator::multiply(0.0,<sp/>5.0),<sp/>0.0);</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="calculator__test_8cpp_1a885dc4f6a00c3d0b54725164c875dd25" refkind="member"><highlight class="normal"><ref refid="calculator__test_8cpp_1a7d9bab343a282353423ab2d980c8ac52" kindref="member">TEST_F</ref>(<ref refid="class_calculator_test" kindref="compound">CalculatorTest</ref>,<sp/>TestDivide)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_DOUBLE_EQ(Calculator::divide(6.0,<sp/>2.0),<sp/>3.0);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_DOUBLE_EQ(Calculator::divide(-6.0,<sp/>2.0),<sp/>-3.0);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_DOUBLE_EQ(Calculator::divide(0.0,<sp/>5.0),<sp/>0.0);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_THROW(Calculator::divide(5.0,<sp/>0.0),<sp/>std::invalid_argument);</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>===<sp/>Test:<sp/>isInsideCircle<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="calculator__test_8cpp_1ad969fe067beaf84e4cf43d32011ab74a" refkind="member"><highlight class="normal"><ref refid="calculator__test_8cpp_1a7d9bab343a282353423ab2d980c8ac52" kindref="member">TEST_F</ref>(<ref refid="class_calculator_test" kindref="compound">CalculatorTest</ref>,<sp/>TestIsInsideCircle)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Points<sp/>on<sp/>the<sp/>circle<sp/>(x^2<sp/>+<sp/>y^2<sp/>=<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(Calculator::isInsideCircle(1.0,<sp/>0.0));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(Calculator::isInsideCircle(0.0,<sp/>1.0));</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(Calculator::isInsideCircle(1.0,<sp/>1.0));</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(Calculator::isInsideCircle(0.5,<sp/>0.5));</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(Calculator::isInsideCircle(1.1,<sp/>0.0));</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>===<sp/>Test:<sp/>generatePoints<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="calculator__test_8cpp_1a677a867bb10f7d7cb26b929c0a3984ea" refkind="member"><highlight class="normal"><ref refid="calculator__test_8cpp_1a7d9bab343a282353423ab2d980c8ac52" kindref="member">TEST_F</ref>(<ref refid="class_calculator_test" kindref="compound">CalculatorTest</ref>,<sp/>TestGeneratePointsSizeAndRange)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numPoints<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>points<sp/>=<sp/>Calculator::generatePoints(numPoints);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(points.size(),<sp/>numPoints);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>p<sp/>:<sp/>points)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_GE(p.first,<sp/>-1.0);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_LE(p.first,<sp/>1.0);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_GE(p.second,<sp/>-1.0);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_LE(p.second,<sp/>1.0);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>===<sp/>Test:<sp/>calculatePiSequential<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="calculator__test_8cpp_1ad05614cd3fed8eb94c3038df96b4ed4a" refkind="member"><highlight class="normal"><ref refid="calculator__test_8cpp_1a7d9bab343a282353423ab2d980c8ac52" kindref="member">TEST_F</ref>(<ref refid="class_calculator_test" kindref="compound">CalculatorTest</ref>,<sp/>TestCalculatePiSequential)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pi<sp/>=<sp/>Calculator::calculatePiSequential(100000);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NEAR(pi,<sp/>3.1415,<sp/>0.05);<sp/><sp/></highlight><highlight class="comment">//<sp/>Monte<sp/>Carlo<sp/>0.05<sp/>tolerans</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/>===<sp/>Test:<sp/>calculatePiParallel<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="calculator__test_8cpp_1a7db73f77b8132899803b783d24fc80d8" refkind="member"><highlight class="normal"><ref refid="calculator__test_8cpp_1a7d9bab343a282353423ab2d980c8ac52" kindref="member">TEST_F</ref>(<ref refid="class_calculator_test" kindref="compound">CalculatorTest</ref>,<sp/>TestCalculatePiParallel)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pi<sp/>=<sp/>Calculator::calculatePiParallel(100000,<sp/>4);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NEAR(pi,<sp/>3.1415,<sp/>0.05);</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>===<sp/>Test:<sp/>calculateConvergence<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="calculator__test_8cpp_1ada64ada539a2ca0dd5663e7ad1cdc275" refkind="member"><highlight class="normal"><ref refid="calculator__test_8cpp_1a7d9bab343a282353423ab2d980c8ac52" kindref="member">TEST_F</ref>(<ref refid="class_calculator_test" kindref="compound">CalculatorTest</ref>,<sp/>TestCalculateConvergence)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>points<sp/>=<sp/>Calculator::generatePoints(10000);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>convergence<sp/>=<sp/>Calculator::calculateConvergence(points);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_GT(convergence.size(),<sp/>5);<sp/><sp/></highlight><highlight class="comment">//<sp/>10000/1000<sp/>=<sp/>10<sp/>veri<sp/>noktas<sp/>beklenir</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>piVal<sp/>:<sp/>convergence)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_GT(piVal,<sp/>2.5);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_LT(piVal,<sp/>4.0);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/>===<sp/>Main<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="calculator__test_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="calculator__test_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>::testing::InitGoogleTest(&amp;argc,<sp/>argv);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/tests/calculator/calculator_test.cpp"/>
  </compounddef>
</doxygen>
